When is copy constructor called?
In C++, a Copy Constructor may be called in following cases:
1. When an object of the class is returned by value.
2. When an object of the class is passed (to a function) by value as an argument.
3. When an object is constructed based on another object of the same class.
4. When the compiler generates a temporary object.

It is, however, not guaranteed that a copy constructor will be called in all these cases, 
because the C++ Standard allows the compiler to optimize the copy away in certain cases,

As it is used to create an object, hence it is called a constructor.
 And, it creates a new object, which is exact copy of the existing copy, hence it is called copy constructor.
https://www.studytonight.com/cpp/copy-constructor-in-cpp.php#:~:text=Copy%20Constructor%20in%20C%2B%2B,Constructor%20to%20all%20the%20classes.
https://www.dummies.com/programming/cpp/why-you-need-copy-constructors-in-c/
https://www.geeksforgeeks.org/copy-constructor-in-cpp/
When is user-defined copy constructor needed?
If we don’t define our own copy constructor, the C++ compiler creates a default copy constructor for each class 
which does a member-wise copy between objects. The compiler created copy constructor works fine in general.
 We need to define our own copy constructor only if an object has pointers or any runtime allocation of the resource like file handle, a network connection..etc.

Default constructor does only shallow copy.
shallow

Deep copy is possible only with user defined copy constructor. In user defined copy constructor, 
we make sure that pointers (or references) of copied object point to new memory locations.
deep-300x179

Copy constructor vs Assignment Operator
Which of the following two statements call copy constructor and which one calls assignment operator?
The copy constructor is a constructor which creates an object by initializing it with an object of the same class, which has been created previously. 
The copy constructor is used to - Initialize one object from another of the same type. Copy an object to pass it as an argument to a function.


#include<iostream>
#include<cstring>
using namespace std;
class CopyConstructor
{
    char *s_copy;
    public:
    CopyConstructor(const char *str)
    {
        s_copy = new char[16]; //Dynamic memory allocation
        strcpy(s_copy, str);
    }
    /* concatenate method */
    void concatenate(const char *str)
    {
        strcat(s_copy, str); //Concatenating two strings
    }
    /* copy constructor */
    ~CopyConstructor ()
    { 
        delete [] s_copy;
    }
    void display()
    {
        cout<<s_copy<<endl;
    }
};
/* main function */
int main()
{
    CopyConstructor c1("Copy");
    CopyConstructor c2 = c1; //Copy constructor
    c1.display();
    c2.display();
    c1.concatenate("Constructor");    //c1 is invoking concatenate()
    c1.display();
    c2.display();
    return 0;
}